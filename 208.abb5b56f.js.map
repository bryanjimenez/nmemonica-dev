{"version":3,"file":"208.abb5b56f.js","sources":["webpack://nmemonica/./src/components/Form/PlusMinus.tsx","webpack://nmemonica/./src/components/Form/SettingsPhrase.tsx","webpack://nmemonica/./src/components/Form/SimpleListMenu.tsx?4125","webpack://nmemonica/./src/components/Form/ThresholdFilterSlider.tsx","webpack://nmemonica/./src/components/Pages/SetTermGFList.tsx","webpack://nmemonica/./src/components/Pages/SetTermGList.tsx"],"sourcesContent":["import classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\ninterface PlusMinusProps {\n  label: string;\n  value: number;\n  onChange: (value: number) => void;\n}\n\nexport default function PlusMinus(props: PlusMinusProps) {\n  const { label, value } = props;\n\n  return (\n    <div\n      className={classNames({\n        \"mb-3 d-flex flex-row justify-content-end\": true,\n      })}\n    >\n      <div>{label}</div>\n      <div\n        className=\"clickable px-2\"\n        onClick={() => {\n          props.onChange(value - 1);\n        }}\n      >\n        -\n      </div>\n      <div\n        className={classNames({\n          \"px-2\": true,\n        })}\n      >\n        {value}\n      </div>\n      <div\n        className=\"clickable px-2\"\n        onClick={() => {\n          props.onChange(value + 1);\n        }}\n      >\n        +\n      </div>\n    </div>\n  );\n}\n\nPlusMinus.propTypes = {\n  value: PropTypes.number,\n};\n","import { useDispatch } from \"react-redux\";\n\nimport { NotReady } from \"./NotReady\";\nimport PlusMinus from \"./PlusMinus\";\nimport SettingsSwitch from \"./SettingsSwitch\";\nimport SimpleListMenu from \"./SimpleListMenu\";\nimport { ThresholdFilterSlider } from \"./ThresholdFilterSlider\";\nimport { buildAction } from \"../../helper/eventHandlerHelper\";\nimport { getStaleGroups, labelOptions } from \"../../helper/gameHelper\";\nimport { useConnectPhrase } from \"../../hooks/useConnectPhrase\";\nimport type { AppDispatch } from \"../../slices\";\nimport {\n  getPhrase,\n  removeFrequencyPhrase,\n  setMemorizedThreshold,\n  setSpaRepMaxItemReview,\n  toggleIncludeNew,\n  toggleIncludeReviewed,\n  togglePhraseActiveGrp,\n  togglePhrasesFilter,\n  togglePhrasesOrdering,\n  togglePhrasesReinforcement,\n  togglePhrasesRomaji,\n} from \"../../slices/phraseSlice\";\nimport {\n  TermFilterBy,\n  TermSortBy,\n  TermSortByLabel,\n} from \"../../slices/settingHelper\";\nimport { SetTermGFList } from \"../Pages/SetTermGFList\";\nimport { SetTermGList } from \"../Pages/SetTermGList\";\n\nexport default function SettingsPhrase() {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const {\n    phraseList: phrases,\n    phraseGroups,\n    sortMethod: phraseOrderRef,\n    romajiActive: phraseRomajiRef,\n    difficultyThreshold,\n    activeGroup: phraseActive,\n    filterType: phraseFilterRef,\n    repetition: phraseRep,\n    reinforce: phraseReinforceRef,\n    spaRepMaxReviewItem,\n    includeNew,\n    includeReviewed,\n  } = useConnectPhrase();\n\n  const phraseFilter = phraseFilterRef.current;\n  const phraseOrder = phraseOrderRef.current;\n  const phraseRomaji = phraseRomajiRef.current;\n  const phraseReinforce = phraseReinforceRef.current;\n\n  if (phrases.length === 0) {\n    void dispatch(getPhrase());\n  }\n\n  const phraseFreq = Object.keys(phraseRep).filter(\n    (k) => phraseRep[k]?.rein === true\n  );\n\n  if (phrases.length < 1 || Object.keys(phraseGroups).length < 1)\n    return <NotReady addlStyle=\"phrases-settings\" />;\n\n  const stale = getStaleGroups(phraseGroups, phraseActive);\n  if (stale.length > 0) {\n    const error = new Error(\"Stale phrases active group\", {\n      cause: { code: \"StalePhraseActiveGrp\", value: stale },\n    });\n    throw error;\n  }\n\n  const el = (\n    <div className=\"outer\">\n      <div className=\"d-flex flex-row justify-content-between\">\n        <div className=\"column-1\">\n          <span className=\"fs-5 fw-light\">\n            {labelOptions(phraseFilter, [\n              \"Phrases Group\",\n              \"Frequency List\",\n              \"NOT_USED_Tags\",\n            ])}\n          </span>\n          <div className=\"mb-2\">\n            <SettingsSwitch\n              active={phraseFilter % 2 === 0}\n              action={buildAction(dispatch, togglePhrasesFilter)}\n              color=\"default\"\n              statusText={\"Filter by\"}\n            />\n          </div>\n          {phraseFilter === TermFilterBy.GROUP && (\n            <SetTermGList\n              termsGroups={phraseGroups}\n              termsActive={phraseActive}\n              toggleTermActiveGrp={(grp) =>\n                dispatch(togglePhraseActiveGrp(grp))\n              }\n            />\n          )}\n          {phraseFilter === TermFilterBy.FREQUENCY &&\n            phraseFreq.length === 0 && (\n              <div className=\"fst-italic\">No phrases have been chosen</div>\n            )}\n          {phraseFilter === TermFilterBy.FREQUENCY && phraseFreq.length > 0 && (\n            <SetTermGFList\n              termsActive={phraseActive}\n              termsFreq={phraseFreq}\n              terms={phrases}\n              removeFrequencyTerm={(uid) =>\n                dispatch(removeFrequencyPhrase(uid))\n              }\n              toggleTermActiveGrp={(grp) =>\n                dispatch(togglePhraseActiveGrp(grp))\n              }\n            />\n          )}\n        </div>\n        <div className=\"column-2 setting-block\">\n          <div className=\"mb-2\">\n            <SimpleListMenu\n              title={\"Sort by:\"}\n              options={TermSortByLabel}\n              initial={phraseOrder}\n              allowed={[\n                TermSortBy.RANDOM,\n                TermSortBy.VIEW_DATE,\n                TermSortBy.RECALL,\n              ]}\n              onChange={(index) => {\n                if (TermSortBy.RECALL === index) {\n                  dispatch(togglePhrasesReinforcement(false));\n                }\n                return buildAction(dispatch, togglePhrasesOrdering)(index);\n              }}\n            />\n          </div>\n          {phraseOrder === TermSortBy.RECALL && (\n            <PlusMinus\n              label=\"Max review items \"\n              value={spaRepMaxReviewItem}\n              onChange={(value: number) => {\n                dispatch(setSpaRepMaxItemReview(value));\n              }}\n            />\n          )}\n          <div className=\"d-flex justify-content-end\">\n            <ThresholdFilterSlider\n              threshold={difficultyThreshold}\n              setThreshold={buildAction(dispatch, setMemorizedThreshold)}\n            />\n          </div>\n          {phraseOrder === TermSortBy.VIEW_DATE && (\n            <>\n              <div className=\"mb-2\">\n                <SettingsSwitch\n                  active={includeNew}\n                  action={buildAction(dispatch, toggleIncludeNew)}\n                  statusText=\"Staleness +New\"\n                />\n              </div>\n              <div className=\"mb-2\">\n                <SettingsSwitch\n                  active={includeReviewed}\n                  action={buildAction(dispatch, toggleIncludeReviewed)}\n                  statusText=\"Staleness +Reviewed\"\n                />\n              </div>\n            </>\n          )}\n          <div className=\"mb-2\">\n            <SettingsSwitch\n              active={phraseReinforce}\n              action={buildAction(dispatch, togglePhrasesReinforcement)}\n              disabled={\n                phraseFilter === TermFilterBy.FREQUENCY ||\n                phraseOrder === TermSortBy.RECALL\n              }\n              statusText=\"Reinforcement\"\n            />\n          </div>\n          <div className=\"mb-2\">\n            <SettingsSwitch\n              active={phraseRomaji}\n              action={buildAction(dispatch, togglePhrasesRomaji)}\n              statusText=\"Romaji\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return el;\n}\n","import {\n  IconButton,\n  List,\n  ListItemButton,\n  ListItemText,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport { KebabHorizontalIcon } from \"@primer/octicons-react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\ninterface SimpleListMenuProps {\n  /** Whether menu is interdisabled */\n  disabled?: boolean; //\n  /** Whether elipsis and options are horizontally reversed */\n  flip?: boolean;\n  title: string;\n  options: string[];\n  allowed?: number[];\n  initial: number;\n  onChange: (index: number) => void;\n}\n\nexport default function SimpleListMenu(props: SimpleListMenuProps) {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [selectedIndex, setSelectedIndex] = useState(props.initial);\n\n  const optionsRef = useRef(props.options);\n  const allowedRef = useRef(props.allowed ?? props.options.map((o, i) => i));\n  const options = optionsRef.current;\n  const allowed = allowedRef.current;\n\n  useEffect(() => {\n    setSelectedIndex(props.initial);\n  }, [props.initial]);\n\n  const open = Boolean(anchorEl);\n  const handleClickListItem = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (\n    event: React.MouseEvent<HTMLElement>,\n    index: number\n  ) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    props.onChange(index);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      className={classNames({\n        clickable: props.disabled !== true,\n        \"d-flex\": true,\n        \"flex-row-reverse\": props.flip === true ? true : undefined,\n        \"justify-content-end\": true,\n      })}\n    >\n      <List component=\"nav\" disablePadding={true}>\n        <ListItemButton\n          disableGutters={true}\n          disabled={props.disabled === true}\n          id=\"filter-button\"\n          aria-haspopup=\"listbox\"\n          aria-controls=\"filter-menu\"\n          aria-expanded={open ? \"true\" : undefined}\n          onClick={handleClickListItem}\n        >\n          <ListItemText\n            primary={props.title}\n            secondary={options[selectedIndex]}\n            secondaryTypographyProps={{ color: \"unset\" }}\n          />\n        </ListItemButton>\n      </List>\n      <Menu\n        id=\"filter-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          \"aria-labelledby\": \"filter-button\",\n          role: \"listbox\",\n        }}\n      >\n        {options.map((option, index) => (\n          <MenuItem\n            key={option}\n            // disabled={index === 0}\n            selected={index === selectedIndex}\n            onClick={(event) => {\n              if (allowed.includes(index)) handleMenuItemClick(event, index);\n            }}\n          >\n            {allowed.includes(index) ? (\n              option\n            ) : (\n              <span className=\"disabled-color\">{option}</span>\n            )}\n          </MenuItem>\n        ))}\n      </Menu>\n\n      <IconButton\n        aria-labelledby=\"filter-button\"\n        sx={{ color: \"unset\", minWidth: \"55px\" }}\n        aria-haspopup=\"listbox\"\n        disabled={props.disabled === true}\n        onClick={handleClickListItem}\n      >\n        <KebabHorizontalIcon\n          size=\"medium\"\n          className={classNames({\n            \"rotate-transition\": true,\n            \"rotate-90\": open,\n          })}\n        />\n      </IconButton>\n    </div>\n  );\n}\n\nSimpleListMenu.propTypes = {\n  disabled: PropTypes.bool,\n  flip: PropTypes.bool,\n  title: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.string),\n  initial: PropTypes.number,\n  onChange: PropTypes.func,\n};\n","import { Slider } from \"@mui/material\";\nimport { SortAscIcon, SortDescIcon } from \"@primer/octicons-react\";\nimport PropTypes from \"prop-types\";\nimport { useCallback, useState } from \"react\";\n\nimport { heatMap } from \"../../helper/colorHelper\";\nimport { DIFFICULTY_THRLD, MEMORIZED_THRLD } from \"../../helper/sortHelper\";\n\ninterface ThresholdFilterSliderProps {\n  threshold: number;\n  setThreshold: (value: number) => void;\n}\n\nexport function ThresholdFilterSlider(props: ThresholdFilterSliderProps) {\n  const { threshold, setThreshold } = props;\n  const [defaultValue] = useState(Math.abs(threshold));\n\n  const c = heatMap(Math.abs(threshold) / 100, 0.75);\n  const difficultyMarks = [\n    {\n      value: MEMORIZED_THRLD,\n      // label: \"memorized\"\n    },\n    {\n      value: DIFFICULTY_THRLD,\n      // label: \"difficult\",\n    },\n  ];\n\n  const flipThresholdCB = useCallback(() => {\n    setThreshold(-1 * threshold);\n  }, [setThreshold, threshold]);\n\n  return (\n    <>\n      <div\n        className=\"position-relative text-nowrap w-0 fs-x-small\"\n        style={{ top: \"-15px\" }}\n      >\n        {`Difficulty filter: ${threshold}`}\n      </div>\n      <Slider\n        sx={{ color: c }}\n        defaultValue={defaultValue}\n        marks={difficultyMarks}\n        track={threshold < 0 ? undefined : \"inverted\"}\n        onChangeCommitted={(e, newValue) => {\n          const sign = threshold < 0 ? -1 : 1;\n          if (typeof newValue === \"number\") {\n            if (newValue === 0) {\n              setThreshold(Number(sign));\n            } else {\n              setThreshold(sign * newValue);\n            }\n          }\n        }}\n        valueLabelDisplay=\"auto\"\n      />\n\n      <div className=\"mt-2 ms-3 \" onClick={flipThresholdCB}>\n        {threshold < 0 ? <SortAscIcon /> : <SortDescIcon />}\n      </div>\n    </>\n  );\n}\n\nThresholdFilterSlider.propTypes = {\n  threshold: PropTypes.number,\n  setThreshold: PropTypes.func,\n};\n","import { IssueDraftIcon, XCircleIcon } from \"@primer/octicons-react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\ninterface MinimunRawItem {\n  uid: string;\n  english: string;\n  grp?: string;\n}\n\ninterface SetTermGFListProps {\n  terms: MinimunRawItem[];\n  termsFreq: string[]; //List of uid of terms to be reinforced/frequency\n  termsActive: string[]; //List of tags that are selected\n  toggleTermActiveGrp: (grp: string) => void;\n  removeFrequencyTerm: (uid: string) => void;\n}\n\nfunction listItem(\n  grpActive: boolean,\n  i: number,\n  uid: string,\n  english: string,\n  removeFrequencyTerm: (uid: string) => void\n) {\n  return (\n    <div\n      key={uid}\n      className={classNames({\n        \"p-0 px-2\": true,\n        clickable: grpActive,\n      })}\n      onClick={() => {\n        if (grpActive) {\n          removeFrequencyTerm(uid);\n        }\n      }}\n    >\n      <span className=\"p-1\">\n        {grpActive && (\n          <XCircleIcon\n            className=\"incorrect-color\"\n            size=\"small\"\n            aria-label=\"remove\"\n          />\n        )}\n        {!grpActive && (\n          <IssueDraftIcon\n            // className=\"incorrect-color\"\n            size=\"small\"\n            aria-label=\"inactive\"\n          />\n        )}\n      </span>\n      <span className=\"p-1\">{english}</span>\n    </div>\n  );\n}\n\n/**\n * Groups + Frequency term list\n */\nexport function SetTermGFList(props: SetTermGFListProps) {\n  let cleanup: string[] = [];\n\n  const thisgrp = props.termsFreq.reduce<MinimunRawItem[]>((acc, f) => {\n    const found = props.terms.find((v) => v.uid === f);\n\n    if (found) {\n      acc = [...acc, found];\n    } else {\n      cleanup = [...cleanup, f];\n    }\n\n    return acc;\n  }, []);\n\n  const grplist = thisgrp.reduce<Record<string, MinimunRawItem[]>>(\n    (acc, cur) => {\n      const key = cur.grp ? cur.grp : \"undefined\";\n\n      if (acc[key]) {\n        acc[key] = [...acc[key], cur];\n      } else {\n        acc[key] = [cur];\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return (\n    <div>\n      <span className=\"fs-5 fw-light\">Frequency</span>\n      <div>\n        {Object.keys(grplist).map((g) => {\n          const grpActive = props.termsActive.includes(g);\n\n          return (\n            <div key={g} className=\"mb-2\">\n              <span\n                className={classNames({ \"font-weight-bold\": grpActive })}\n                onClick={() => props.toggleTermActiveGrp(g)}\n              >\n                {g}\n              </span>\n              <div>\n                {grplist[g].map((word, iw) =>\n                  listItem(\n                    grpActive,\n                    iw,\n                    word.uid,\n                    word.english,\n                    props.removeFrequencyTerm\n                  )\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      {cleanup.length > 0 && (\n        <div className=\"mt-5 text-break\">\n          <span className=\"font-weight-bold\">Manual cleanup</span>\n          {cleanup.map((orphanUid, i) =>\n            listItem(true, i, orphanUid, orphanUid, props.removeFrequencyTerm)\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nSetTermGFList.propTypes = {\n  termsActive: PropTypes.array,\n  termsFreq: PropTypes.array,\n  terms: PropTypes.array,\n  removeFrequencyTerm: PropTypes.func,\n  toggleTermActiveGrp: PropTypes.func,\n};\n","import orderBy from \"lodash/orderBy\";\nimport type { GroupListMap } from \"nmemonica\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { GroupItem } from \"../Form/GroupItem\";\n\ninterface SetTermGListProps {\n  termsGroups: GroupListMap;\n  termsActive: string[];\n  toggleTermActiveGrp: (grp: string) => void;\n}\n\n/**\n * Group and subgroup list\n * @param {SetTermGListProps} props\n */\nexport function SetTermGList(props: SetTermGListProps) {\n  return (\n    <div>\n      <span className=\"fs-5 fw-light\">Groups</span>\n\n      {Object.keys(props.termsGroups).map((g) => {\n        const grpActive = props.termsActive.includes(g);\n\n        return (\n          <div key={g}>\n            <GroupItem\n              active={props.termsActive.includes(g)}\n              onClick={() => props.toggleTermActiveGrp(g)}\n            >\n              {g}\n            </GroupItem>\n\n            {!grpActive &&\n              orderBy(props.termsGroups[g], (o) => {\n                // order numerically if group has _number\n                const [, /*lbl,*/ num] = o.split(\"_\");\n                if (Number.isInteger(parseInt(num, 10))) {\n                  return parseInt(num, 10);\n                }\n                return o;\n              }).map((s) => (\n                <GroupItem\n                  key={`${g}.${s}`}\n                  addlStyle=\"ms-3\"\n                  active={props.termsActive.includes(g + \".\" + s)}\n                  onClick={() => {\n                    props.toggleTermActiveGrp(g + \".\" + s);\n                  }}\n                >\n                  {s}\n                </GroupItem>\n              ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nSetTermGList.propTypes = {\n  termsGroups: PropTypes.object,\n  termsActive: PropTypes.array,\n  toggleTermActiveGrp: PropTypes.func,\n};\n"],"names":["PlusMinus","props","label","value","className","onClick","onChange","propTypes","SettingsPhrase","dispatch","useDispatch","phraseList","phrases","phraseGroups","sortMethod","phraseOrderRef","romajiActive","phraseRomajiRef","difficultyThreshold","activeGroup","phraseActive","filterType","phraseFilterRef","repetition","phraseRep","reinforce","phraseReinforceRef","spaRepMaxReviewItem","includeNew","includeReviewed","useConnectPhrase","phraseFilter","current","phraseOrder","phraseRomaji","phraseReinforce","length","getPhrase","phraseFreq","Object","keys","filter","k","rein","NotReady","addlStyle","stale","getStaleGroups","Error","cause","code","labelOptions","active","action","buildAction","togglePhrasesFilter","color","statusText","TermFilterBy","SetTermGList","termsGroups","termsActive","toggleTermActiveGrp","grp","togglePhraseActiveGrp","SetTermGFList","termsFreq","terms","removeFrequencyTerm","uid","removeFrequencyPhrase","title","options","TermSortByLabel","initial","allowed","TermSortBy","index","togglePhrasesReinforcement","togglePhrasesOrdering","setSpaRepMaxItemReview","ThresholdFilterSlider","threshold","setThreshold","setMemorizedThreshold","toggleIncludeNew","toggleIncludeReviewed","disabled","togglePhrasesRomaji","SimpleListMenu","anchorEl","setAnchorEl","useState","selectedIndex","setSelectedIndex","optionsRef","useRef","allowedRef","map","o","i","useEffect","open","Boolean","handleClickListItem","event","currentTarget","handleMenuItemClick","clickable","flip","undefined","List","component","disablePadding","ListItemButton","disableGutters","id","ListItemText","primary","secondary","secondaryTypographyProps","Menu","onClose","MenuListProps","role","option","MenuItem","selected","includes","IconButton","sx","minWidth","KebabHorizontalIcon","size","defaultValue","Math","abs","c","heatMap","difficultyMarks","MEMORIZED_THRLD","DIFFICULTY_THRLD","flipThresholdCB","useCallback","style","top","Slider","marks","track","onChangeCommitted","e","newValue","sign","Number","valueLabelDisplay","SortAscIcon","SortDescIcon","listItem","grpActive","english","XCircleIcon","IssueDraftIcon","cleanup","grplist","thisgrp","reduce","acc","f","found","find","v","cur","key","g","word","iw","orphanUid","GroupItem","num","split","isInteger","parseInt","s"],"mappings":"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"}